// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Synthetix extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Synthetix entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Synthetix entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Synthetix", id.toString(), this);
  }

  static load(id: string): Synthetix | null {
    return store.get("Synthetix", id) as Synthetix | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get issuers(): BigInt {
    let value = this.get("issuers");
    return value.toBigInt();
  }

  set issuers(value: BigInt) {
    this.set("issuers", Value.fromBigInt(value));
  }

  get exchangers(): BigInt {
    let value = this.get("exchangers");
    return value.toBigInt();
  }

  set exchangers(value: BigInt) {
    this.set("exchangers", Value.fromBigInt(value));
  }

  get snxHolders(): BigInt {
    let value = this.get("snxHolders");
    return value.toBigInt();
  }

  set snxHolders(value: BigInt) {
    this.set("snxHolders", Value.fromBigInt(value));
  }
}

export class SynthExchange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SynthExchange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SynthExchange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SynthExchange", id.toString(), this);
  }

  static load(id: string): SynthExchange | null {
    return store.get("SynthExchange", id) as SynthExchange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get fromCurrencyKey(): Bytes {
    let value = this.get("fromCurrencyKey");
    return value.toBytes();
  }

  set fromCurrencyKey(value: Bytes) {
    this.set("fromCurrencyKey", Value.fromBytes(value));
  }

  get fromAmount(): BigInt {
    let value = this.get("fromAmount");
    return value.toBigInt();
  }

  set fromAmount(value: BigInt) {
    this.set("fromAmount", Value.fromBigInt(value));
  }

  get toCurrencyKey(): Bytes {
    let value = this.get("toCurrencyKey");
    return value.toBytes();
  }

  set toCurrencyKey(value: Bytes) {
    this.set("toCurrencyKey", Value.fromBytes(value));
  }

  get toAmount(): BigInt {
    let value = this.get("toAmount");
    return value.toBigInt();
  }

  set toAmount(value: BigInt) {
    this.set("toAmount", Value.fromBigInt(value));
  }

  get toAddress(): Bytes {
    let value = this.get("toAddress");
    return value.toBytes();
  }

  set toAddress(value: Bytes) {
    this.set("toAddress", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transfer", id.toString(), this);
  }

  static load(id: string): Transfer | null {
    return store.get("Transfer", id) as Transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get source(): string {
    let value = this.get("source");
    return value.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }
}

export class RatesUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RatesUpdated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RatesUpdated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RatesUpdated", id.toString(), this);
  }

  static load(id: string): RatesUpdated | null {
    return store.get("RatesUpdated", id) as RatesUpdated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get currencyKeys(): Array<Bytes> {
    let value = this.get("currencyKeys");
    return value.toBytesArray();
  }

  set currencyKeys(value: Array<Bytes>) {
    this.set("currencyKeys", Value.fromBytesArray(value));
  }

  get newRates(): Array<BigInt> {
    let value = this.get("newRates");
    return value.toBigIntArray();
  }

  set newRates(value: Array<BigInt>) {
    this.set("newRates", Value.fromBigIntArray(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Issued extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Issued entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Issued entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Issued", id.toString(), this);
  }

  static load(id: string): Issued | null {
    return store.get("Issued", id) as Issued | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get source(): string {
    let value = this.get("source");
    return value.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class Issuer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Issuer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Issuer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Issuer", id.toString(), this);
  }

  static load(id: string): Issuer | null {
    return store.get("Issuer", id) as Issuer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get debtBalance(): BigInt | null {
    let value = this.get("debtBalance");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set debtBalance(value: BigInt | null) {
    if (value === null) {
      this.unset("debtBalance");
    } else {
      this.set("debtBalance", Value.fromBigInt(value as BigInt));
    }
  }

  get collateralisationRatio(): BigInt | null {
    let value = this.get("collateralisationRatio");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collateralisationRatio(value: BigInt | null) {
    if (value === null) {
      this.unset("collateralisationRatio");
    } else {
      this.set("collateralisationRatio", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Exchanger extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Exchanger entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Exchanger entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Exchanger", id.toString(), this);
  }

  static load(id: string): Exchanger | null {
    return store.get("Exchanger", id) as Exchanger | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class SNXHolder extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SNXHolder entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SNXHolder entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SNXHolder", id.toString(), this);
  }

  static load(id: string): SNXHolder | null {
    return store.get("SNXHolder", id) as SNXHolder | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collateral(): BigInt | null {
    let value = this.get("collateral");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set collateral(value: BigInt | null) {
    if (value === null) {
      this.unset("collateral");
    } else {
      this.set("collateral", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Burned extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Burned entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Burned entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Burned", id.toString(), this);
  }

  static load(id: string): Burned | null {
    return store.get("Burned", id) as Burned | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get source(): string {
    let value = this.get("source");
    return value.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class ProxyTargetUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProxyTargetUpdated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProxyTargetUpdated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProxyTargetUpdated", id.toString(), this);
  }

  static load(id: string): ProxyTargetUpdated | null {
    return store.get("ProxyTargetUpdated", id) as ProxyTargetUpdated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get source(): string {
    let value = this.get("source");
    return value.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get newTarget(): Bytes {
    let value = this.get("newTarget");
    return value.toBytes();
  }

  set newTarget(value: Bytes) {
    this.set("newTarget", Value.fromBytes(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}
