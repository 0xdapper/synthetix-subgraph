// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SynthExchange extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SynthExchange entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SynthExchange entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SynthExchange", id.toString(), this);
  }

  static load(id: string): SynthExchange | null {
    return store.get("SynthExchange", id) as SynthExchange | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get fromCurrencyKey(): Bytes {
    let value = this.get("fromCurrencyKey");
    return value.toBytes();
  }

  set fromCurrencyKey(value: Bytes) {
    this.set("fromCurrencyKey", Value.fromBytes(value));
  }

  get fromAmount(): BigInt {
    let value = this.get("fromAmount");
    return value.toBigInt();
  }

  set fromAmount(value: BigInt) {
    this.set("fromAmount", Value.fromBigInt(value));
  }

  get toCurrencyKey(): Bytes {
    let value = this.get("toCurrencyKey");
    return value.toBytes();
  }

  set toCurrencyKey(value: Bytes) {
    this.set("toCurrencyKey", Value.fromBytes(value));
  }

  get toAmount(): BigInt {
    let value = this.get("toAmount");
    return value.toBigInt();
  }

  set toAmount(value: BigInt) {
    this.set("toAmount", Value.fromBigInt(value));
  }

  get toAddress(): Bytes {
    let value = this.get("toAddress");
    return value.toBytes();
  }

  set toAddress(value: Bytes) {
    this.set("toAddress", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transfer", id.toString(), this);
  }

  static load(id: string): Transfer | null {
    return store.get("Transfer", id) as Transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get source(): string {
    let value = this.get("source");
    return value.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }
}

export class RatesUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save RatesUpdated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save RatesUpdated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("RatesUpdated", id.toString(), this);
  }

  static load(id: string): RatesUpdated | null {
    return store.get("RatesUpdated", id) as RatesUpdated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get currencyKeys(): Array<Bytes> {
    let value = this.get("currencyKeys");
    return value.toBytesArray();
  }

  set currencyKeys(value: Array<Bytes>) {
    this.set("currencyKeys", Value.fromBytesArray(value));
  }

  get newRates(): Array<BigInt> {
    let value = this.get("newRates");
    return value.toBigIntArray();
  }

  set newRates(value: Array<BigInt>) {
    this.set("newRates", Value.fromBigIntArray(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class Issued extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Issued entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Issued entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Issued", id.toString(), this);
  }

  static load(id: string): Issued | null {
    return store.get("Issued", id) as Issued | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get source(): string {
    let value = this.get("source");
    return value.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class Issuer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Issuer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Issuer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Issuer", id.toString(), this);
  }

  static load(id: string): Issuer | null {
    return store.get("Issuer", id) as Issuer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class Burned extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Burned entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Burned entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Burned", id.toString(), this);
  }

  static load(id: string): Burned | null {
    return store.get("Burned", id) as Burned | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get source(): string {
    let value = this.get("source");
    return value.toString();
  }

  set source(value: string) {
    this.set("source", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    return value.toBigInt();
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Approval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Approval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Approval", id.toString(), this);
  }

  static load(id: string): Approval | null {
    return store.get("Approval", id) as Approval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get spender(): Bytes {
    let value = this.get("spender");
    return value.toBytes();
  }

  set spender(value: Bytes) {
    this.set("spender", Value.fromBytes(value));
  }

  get value(): BigInt {
    let value = this.get("value");
    return value.toBigInt();
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }
}

export class TokenStateUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenStateUpdated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenStateUpdated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenStateUpdated", id.toString(), this);
  }

  static load(id: string): TokenStateUpdated | null {
    return store.get("TokenStateUpdated", id) as TokenStateUpdated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newTokenState(): Bytes {
    let value = this.get("newTokenState");
    return value.toBytes();
  }

  set newTokenState(value: Bytes) {
    this.set("newTokenState", Value.fromBytes(value));
  }
}

export class ProxyUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ProxyUpdated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ProxyUpdated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ProxyUpdated", id.toString(), this);
  }

  static load(id: string): ProxyUpdated | null {
    return store.get("ProxyUpdated", id) as ProxyUpdated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get proxyAddress(): Bytes {
    let value = this.get("proxyAddress");
    return value.toBytes();
  }

  set proxyAddress(value: Bytes) {
    this.set("proxyAddress", Value.fromBytes(value));
  }
}

export class SelfDestructTerminated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save SelfDestructTerminated entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SelfDestructTerminated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SelfDestructTerminated", id.toString(), this);
  }

  static load(id: string): SelfDestructTerminated | null {
    return store.get(
      "SelfDestructTerminated",
      id
    ) as SelfDestructTerminated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class SelfDestructed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SelfDestructed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SelfDestructed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SelfDestructed", id.toString(), this);
  }

  static load(id: string): SelfDestructed | null {
    return store.get("SelfDestructed", id) as SelfDestructed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get beneficiary(): Bytes {
    let value = this.get("beneficiary");
    return value.toBytes();
  }

  set beneficiary(value: Bytes) {
    this.set("beneficiary", Value.fromBytes(value));
  }
}

export class SelfDestructInitiated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save SelfDestructInitiated entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SelfDestructInitiated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SelfDestructInitiated", id.toString(), this);
  }

  static load(id: string): SelfDestructInitiated | null {
    return store.get(
      "SelfDestructInitiated",
      id
    ) as SelfDestructInitiated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get selfDestructDelay(): BigInt {
    let value = this.get("selfDestructDelay");
    return value.toBigInt();
  }

  set selfDestructDelay(value: BigInt) {
    this.set("selfDestructDelay", Value.fromBigInt(value));
  }
}

export class SelfDestructBeneficiaryUpdated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id !== null,
      "Cannot save SelfDestructBeneficiaryUpdated entity without an ID"
    );
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SelfDestructBeneficiaryUpdated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SelfDestructBeneficiaryUpdated", id.toString(), this);
  }

  static load(id: string): SelfDestructBeneficiaryUpdated | null {
    return store.get(
      "SelfDestructBeneficiaryUpdated",
      id
    ) as SelfDestructBeneficiaryUpdated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newBeneficiary(): Bytes {
    let value = this.get("newBeneficiary");
    return value.toBytes();
  }

  set newBeneficiary(value: Bytes) {
    this.set("newBeneficiary", Value.fromBytes(value));
  }
}

export class OwnerNominated extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OwnerNominated entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OwnerNominated entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OwnerNominated", id.toString(), this);
  }

  static load(id: string): OwnerNominated | null {
    return store.get("OwnerNominated", id) as OwnerNominated | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}

export class OwnerChanged extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save OwnerChanged entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save OwnerChanged entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("OwnerChanged", id.toString(), this);
  }

  static load(id: string): OwnerChanged | null {
    return store.get("OwnerChanged", id) as OwnerChanged | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get oldOwner(): Bytes {
    let value = this.get("oldOwner");
    return value.toBytes();
  }

  set oldOwner(value: Bytes) {
    this.set("oldOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    return value.toBytes();
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }
}
