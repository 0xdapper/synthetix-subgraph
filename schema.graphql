type Synthetix @entity {
  id: ID!
  issuers: BigInt!
  exchangers: BigInt!
  snxHolders: BigInt!
}

type SynthExchange @entity {
  id: ID!
  account: Bytes! # address
  from: Bytes! # address
  fromCurrencyKey: Bytes! # bytes4
  fromAmount: BigInt! # uint256
  toCurrencyKey: Bytes! # bytes4
  toAmount: BigInt! # uint256
  toAddress: Bytes! # address
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

type Transfer @entity {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  timestamp: BigInt!
  block: BigInt!
  source: String!
}

type RatesUpdated @entity {
  id: ID!
  from: Bytes! # address
  currencyKeys: [Bytes!]! # bytes4[]
  newRates: [BigInt!]! # uint256[]
  gasPrice: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type Issued @entity {
  id: ID!
  account: Bytes! # address
  value: BigInt! # uint256
  source: String!
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

type Issuer @entity {
  id: ID!
  debtBalance: BigInt # will be null before multicurrency release
  collateralisationRatio: BigInt # will be null before multicurrency release
}

type Exchanger @entity {
  id: ID!
}

type SNXHolder @entity {
  id: ID!
  collateral: BigInt # will be null before multicurrency release
}

type Burned @entity {
  id: ID!
  account: Bytes! # address
  value: BigInt! # uint256
  source: String!
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

type ProxyTargetUpdated @entity {
  id: ID!
  source: String!
  newTarget: Bytes! # address
  block: BigInt!
}
