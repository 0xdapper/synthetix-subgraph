type SynthExchange @entity {
  id: ID!
  account: Bytes! # address
  from: Bytes! # address
  fromCurrencyKey: Bytes! # bytes4
  fromAmount: BigInt! # uint256
  toCurrencyKey: Bytes! # bytes4
  toAmount: BigInt! # uint256
  toAddress: Bytes! # address
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

type Transfer @entity {
  id: ID!
  from: Bytes! # address
  to: Bytes! # address
  value: BigInt! # uint256
  timestamp: BigInt!
  block: BigInt!
  source: String!
}

type RatesUpdated @entity {
  id: ID!
  from: Bytes! # address
  currencyKeys: [Bytes!]! # bytes4[]
  newRates: [BigInt!]! # uint256[]
  gasPrice: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type Issued @entity {
  id: ID!
  account: Bytes! # address
  value: BigInt! # uint256
  source: String!
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

type Issuer @entity {
  id: ID!
}

type Burned @entity {
  id: ID!
  account: Bytes! # address
  value: BigInt! # uint256
  source: String!
  timestamp: BigInt!
  gasPrice: BigInt!
  block: BigInt!
}

type Approval @entity {
  id: ID!
  owner: Bytes! # address
  spender: Bytes! # address
  value: BigInt! # uint256
}

type TokenStateUpdated @entity {
  id: ID!
  newTokenState: Bytes! # address
}

type ProxyUpdated @entity {
  id: ID!
  proxyAddress: Bytes! # address
}

type SelfDestructTerminated @entity {
  id: ID!
}

type SelfDestructed @entity {
  id: ID!
  beneficiary: Bytes! # address
}

type SelfDestructInitiated @entity {
  id: ID!
  selfDestructDelay: BigInt! # uint256
}

type SelfDestructBeneficiaryUpdated @entity {
  id: ID!
  newBeneficiary: Bytes! # address
}

type OwnerNominated @entity {
  id: ID!
  newOwner: Bytes! # address
}

type OwnerChanged @entity {
  id: ID!
  oldOwner: Bytes! # address
  newOwner: Bytes! # address
}
